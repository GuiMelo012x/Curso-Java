String nome = sc.nextLine(); 
	Recebe uma String no teclado.
	Seleciona todas as linhas, CTRL + / = comenta todas as linhas

num = (valor > 0) ? valor : 7; 
	Se o valor for menor que zero, ele vira 7. Se for maior que zero, continua o mesmo.
	O "?" seria o else.
	
For Each
	String universidade = "Universidade";
		// para cada um dos caracteres da string, imprime a letra.
        for (char letra : universidade.toCharArray()) {
            System.out.println(letra);
        }

Tipos de Dados em Java
	Tipos de Dados Numéricos
		Tipos primários/Primitivos
			int num1 = 51;
			short num2 = 12; --> ocupa menos espaço que o int.
			long num3 = 512123;
			byte num4 = 5; --> Inteiro
			char num5 = 35;

		Tipos não primários/ Não primitivos
			Integer e Short são classes.
			Integer num6 = 12;
			Short num7 = (short) 156; --> cast
			

		double preco = 0.3463; --> se o valor for muito extenso, é melhor trabalhar com double.
		float preco2 = 0.2984f; --> ocupa menos espaço que o double.
		
		Float preco3 = 0.70f;
		Double preco4 = 0.74;
		
		System.out.println(Integer.SIZE) --> para saber quanto uma variável ocupa.
		System.out.println(Integer.MAX_VALUE) --> para saber o valor máximo do Integer (também funciona com Short e outros).
		System.out.println(Integer.MIN_VALUE) --> para saber o valor mínimo do Integer (também funciona com Short e outros).

			
		long/Long --> 64 bits.
		int/Integer --> 32 bits.
		short/Short --> 16 bits.
		char/Character --> 16 bits.
		byte/Byte --> 8 bits.
		
	Tipos de Dados Alfanuméricos
		char letra = 'a';
			o char serve tanto para número quanto para letra.
			
		String nome = "Git"
	
	Tipos Booleanos
		Tipos primitivos
			boolean verdadeiro = true;
			boolean falso = false;
			
		Tipos não primitivos
			Boolean V = true;
			Boolean F = false;
		
		 
Vetores
	int numeros[];
		declarando o vetor.
	
	int numeros [] = new int [5];
		declarando e especificando o tamanho do vetor.
	
	int numeros[] = {0,1,2,3,4};
		declarando, especificando e inicializando o vetor.
		
	String nomes[] = new String[4]
	String frutas[] = {"Uva", "Melancia", "Banana"}
	
	Os vetores possuem o tamanho de [n-1], ou seja, o [10] tem 9 indexes.
	Os vetores possuem tamanho fixo e não podem ser aumentados/diminuídos.
	Os vetores possuem tipos de dados fixos e não podem ser alterados.

	  for (int i:numeros) {
		System.out.println(i);
	} --> forma de imprimir todo o vetor, mas não há condição de parada.

Matrizes
	São arrays multi-dimensionais.
	
	int numeros[] [];
		declarando.
	
	int numeros [] [] = new int [3][3];
		declarando e definindo o tamanho.
	
	int numeros [] [] = {{1,2,3},{4,5,6},{7,8,9}};
		declarando, definindo o tamanho e inicializando.

	int numeros[] [] = new int [2][]
		declarando apenas a linha

	int numeros [linhas] [colunas];
	
	int matriz [] [] = new int [2][];
	matriz[0] = new int[5];
	matriz[1] = new int[3];
	int matriz[] [] = {{1,2} , {4,5,6,7,8},{9,10,11}};
		
	 for (int i = 0; i < numeros.length; i++) {
            for (int j = 0; j < numeros[i].length; j++) { //numeros[i].length pois ele vê a qtd de itens que tem na linha
                System.out.println("numeros[" + i + "]" + "[" + j + "] = " + numeros[i][j] );
            } --> imprimindo a matriz
Funções
	Devem possuir:
		a) Tipo de retorno (tipo de dado que a função vai retornar).
		b) Nome - a ação que a função realiza.
		c) Parâmetros/Argumentos de entrada (opcional)
		d) Retorno (opcional - depende do tipo de retorno)
		
	void = vazio
	
    static void imprimir (int qtdFrutas){ --> sem return.
	static int multiplicação (int v1,int v2){
	static String mensagem(){


Orientação a Objetos
	orientacao_inicio.Produto - Classe
		nome - objeto/atributos
		preco - objeto/atributos
		desconto - objeto/atributos
		AumentarPreco() - método
			O método é específico de uma classe.
	
	Classes
		Classes se iniciam com letra maiúscula.
		Não há main nas classes.
		Toda classe java se escreve:
			public class Nome{
			}
		O nome da classe java deve ser o mesmo nome do arquivo java.
			orientacao_inicio.Produto.java
	
	Atributos
		Os atributos são as características das classes.
			public class orientacao_inicio.Produto {
				String nome;
				String acucar;
				float preco,desconto;
			}
		Podemos entender atributos como "variáveis" da classe.
		Uma outra forma de nomenclatura para os atributos são "estados".
		Atributos são nomeados em letras minúsculas, sem espaço, acentuação ou caracteres especiais.
		
	Métodos
		São ações que são realizadas por um objeto da classe.
			void aumentar_preco(){ --> Método para aumentar o preço em 10 reais.
				this.preco = this.preco + 10;
			} 
		São comportamentos dos objetos das classes.
		Mesmos requisitos das funções, pedindo nome, parâmetro e retorno (a não ser que seja void).
			void aumentar_preco(float valor){ -->  ele recebe um parâmetro (valor) e aumenta de acordo com o que foi recebido
				this.preco = this.preco + valor;
			}
			Como é void, não retorna nada, apenas executa um comando, que seria alterar o valor do preço.

	Objetos
		São produtos/instâncias da classe.
			orientacao_inicio.Produto p1 = new orientacao_inicio.Produto(); // Declaração e Instanciação do Objeto.
			        // p1 -> instância do objeto
			p1.nome = "Nome do produto";
			p1.preco = "preço"f; --> em float
			p1.desconto = "valor"f; --> em float
		
		Outra forma de instanciar e inicializar:	
			orientacao_inicio.Produto p0;
			p0 = new orientacao_inicio.Produto();
			p0.nome = "nome";
			p0.preco = preco;
			p0.desconto = desconto;
	
	Construtor
		O construtor da calsse sempre tem o mesmo nome da classe.
		Podemos ter mais de um construtor na classe.
		Existem duas formas de declarar o construtor, com e sem parâmetros: 
	
			Public orientacao_inicio.Pessoa(){ --> construtor sem parâmetros
			}
				orientacao_inicio.Pessoa pessoa1 = new orientacao_inicio.Pessoa(); // Construtor sem parâmetros
				pessoa1.nome = "Jula";
				pessoa1.cidade = "Itapecerica";
				pessoa1.ano_nascimento = 2005;
				pessoa1.idade = 18;
		
			public orientacao_inicio.Pessoa(String nome, String cidade, int ano_nascimento, int idade){ ---> Construtor com parâmetros
				this.nome = nome;
				this.cidade = cidade;
				this.ano_nascimento = ano_nascimento;
				this.idade = idade;
			}
				orientacao_inicio.Pessoa pessoa2 = new orientacao_inicio.Pessoa("Guilherme","Recife",2001,22); ---> Com parâmetros

Packages
	Pacotes servem para organizar o código fonte do projeto.
	Indicam onde determinado arquivo do projeto se encontra.
	Os nomes de pacotes devem ser em letras minúsculas,sem espaço, acentuação ou caracteres especiais.
	Por convenção, é utilizado nos nomes de pacotes, o domínio da empresa criadora do projeto, ao contrário, sendo a última 
	parte do nome o especificador do pacote.
		Ex: package br.com.geekuniversity;
	
Encapsulamento
	Proibir o acesso aos atributos diretamente.
	Dessa forma, é necessário criar os getters e setters.
		São métodos públicos, que servem para consultar dados.
	Public
		Modificador de acesso que torna o objeto público, ou seja, é acessado em qualquer lugar do projeto.
		
	Private
		Modificador de acesso que torna o objeto privado, ou seja, só pode ser acessado na classe em que é declarado.
		Para poder ler e alterar o objeto privado fora da classe, deve-se criar os getters e setters.
		joao.saldo = 30 --> não pode
		joao.setSaldo(30) --> pode
		print(joao.saldo) --> não pode
		print (joao.getSaldo()) --> pode
		
	Protected
		Será o modificador de acesso padrão, caso não seja especificado se é public ou private
		Faz com que o elemento seja visivel apenas dentro do mesmo pacote onde o elemento foi declarado.
	Final
		Modificador de acesso que faz com que o elemento que esteja utilizando-o, não possa ser extendido ou reescrito.

Herança
	Evita a repetição de código, e facilita a manutenção do programa.
	Quando uma classe herda de outra classe, ela ganha todos os atributos e métodos da classe herdada.
	A Classe que herda é chamada de classe mãe/pai/superclasse/base.
	A Classe que vai herdar é chamada de classe filha, ou subclasse.
	public class Aluno extends Pessoa{
		private String ra;
	 public Aluno(String nome, int idade,String ra, String email) {
        super(nome,idade, email);  // Pessoa (nome,idade);
        this.ra = ra;
    }
	
	
Polimorfismo 
	Polimorfismo significa muitas formas, ou seja, objetos do mesmo tipo podem agir de formas diferentes.
	O toString por exemplo, se colocado em Pessoa e em Professor, imprime apenas o que tem em pessoa.
	Tem como colocar o toString tanto em Prof quanto em Aluno quanto em Pessoa, e cada um age de uma forma diferente.
		
		public String toString() { --> Classe Professor
			return super.toString() + "\n Matrícula: " + this.matricula;
		
		public String toString() { --> Classe Aluno
			return super.toString() + "\n R.A:" + this.ra;
		
		   
		public String toString() { --> Classe Pessoa
			return "nome = " + nome + ", idade = " + idade + ", email = " + email + " - Método ToString";
	
	Também é possível alterar o método "getNome" para que ele imprima exatamente o que você quer.
	
		public String getNome(){ --> Classe Professor
			return "Professor: " + super.getNome() + " - Método getNome em Professor";
		
		public String getNome(){ --> Classe Aluno
			return "Aluno: " + super.getNome() + " - Método getNome em Aluno";
		
		public String getNome() { --> Classe Pessoa
			return nome;
    
Sobrecarga de Método/Overloading
	Quando sobrescrevemos um método na mesma classe de declaração

		
		public void mensagem(){
			System.out.println("Bom dia");

		public void mensagem(String msg){
			System.out.println(msg); 
			
		p1.mensagem(); --> Printa "Bom dia"
        p1.mensagem("Olá"); --> Printa "Olá!"
	
	Ambos funcionam, pois o primeiro printaria uma mensagem padrão, que seria "Bom dia", caso não houvesse nenhum parâmetro declarado.
	Caso seja declarado o parâmetro, ele iria imprimir a mensagem que está no parênteses.
	No entanto, dois métodos iguais não podem existir, isto é, se existe um método mensagem que não recebe parâmetros, não pode existir
	outro método "mensagem" que também não recebe parâmetros. No entanto, se ele receber algum, está ok.	
			public void mensagem(){
				System.out.println("Bom dia");
			
			public void mensagem(){ --> não pode existir, dá erro.
				System.out.println("Boa tarde");
			
			public void mensagem(String msg){ --> pode existir
				System.out.println(msg);
			
			public void mensagem(String msg, int i){ --> pode existir
				System.out.println(msg + i);

Sobrescrita de Método/Override
	Quando sobrescrevemos métodos da classe pai (super) em classes filhas.
		Quando sobrescrevemos métodos da classe Pessoa na classe Alunos, por exemplo.
		Fizemos isso no método toString em "Alunos"
		
			@Override
			public String toString() {
				return super.toString() + " | R.A:" + this.ra + " - Método ToString (Aluno)";
			
			@Override
			public String toString() {
				return "nome = " + nome + ", idade = " + idade + ", email = " + email; - toString em Pessoa
 

Classes Abstratas
	Recurso que proporciona um bloqueio na criação de objetos.
	Após mudar uma classe para abstrata, não é mais possível instanciar nem mexer no objeto.
	Impossibilita a criação de objetos da classe abstrata.
	Uma classe abstrata pode ter atributos, métodos e métodos abstratos.
		Métodos abstratos são métodos que não possuem implementação, possuem apenas declaração.
		Obrigatoriamente, as classes que herdarem desta classe com método abstrato, precisa implementar estes métodos.
			Se em Pessoa tem o método "dizerOi()", Aluno e Professor também deve conter o método "dizerOi"
	    public abstract void mensagens(String texto); //Declaração de um método abstrato

Template Method
	Define o esqueleto de um algoritmo dentro de um método, transferindo alguns de seus passos para as subclasses.
	Permite que as subclasses redefinam certos passos de um algoritmo sem alterar a sua estrutura.
		public final metodo_principal(){ --> Como ele é final, este método vai se manter desta forma para sempre.
			passo1()
			passo2()
			passo3()
		}

Interfaces
	São conhecidas como "contratos".
	Por exemplo:
		Se uma empresa criou um contrato com regras para definir a criação de um produto.
			O João e a Maria decidiram criar um produto cada um baseado neste contrato.
			Como ambos estão usando as mesmas regras, os produtos serão equivalentes.
		Ex:
			Regras do contrato para confecção de um bolo:
				- Deve ser de chocolate, com cobertura e recheado.
		Quem implementar este contrato, querendo ou não, devem, obrigatoriamente, seguir as regras e 
		fazer um bolo de chocolate com cobertura e recheado.
		No entanto, João pode muito bem fazer uma cobertura de doce de leite, enquanto a Maria de morango.
	
	Para criar um interface, é recomendado criar com um "I" na frente do nome da classe
		Ex: IEletronico
	Uma interface pode conter:
		Constantes
		Métodos Abstratos
	Não é permitido haver métodos concretos ou implementados.
	No programa, é feito uma Interface que serve de contrato para produtos eletrônicos.
		Todo produto eletrônico que implementar esta interface, obrigatoriamente deverão implementar os métodos abstratos.
		
	Para implementar a classe Interface:
		public class Ventilador implements IEletronico{
	Os métodos podem ser implementados e utilizados da forma que quiser.
		Um ventilador, por exemplo, pode executar o ligar de uma forma, e o ar-condicionado, de outra.
			
		public interface IEletronico {
		public String MARCA = "Geek"; --> Desta forma, todos os elementos que herdarem desta classe terão a mesma marca,"Geek".
		public void ligar(); 
		public void desligar(); --> Todos os métodos deverão implementar o ligar e desligar.

Atributos Estáticos
	São atributos onde os valores são compartilhados entre as instâncias da classe.
		No programa, c1,c2 e c3 são uma instância da classe Conta, e compartilham o número pelo atributo "contador"
	Para usar a forma estática, deve ser utilizado o "Conta.contador" ao invés de "this.contador"
		Conta.contador = Conta.contador + 1;  
		Conta.contador = 40; --> Alterando o atributo na main, valendo para todas as instâncias vindo a partir da mudança.

Métodos Estáticos
	Um método estático não depende de uma instância da classe para ser utilizado, pode-se utilizar conforme:
		NomeDaClasse.Metodo
		System.out.println("A próxima conta será: " + Conta.proximaConta()); --> Método estático, não depende de uma instância.
		
Try Catch
	Utilizamos o Try para tentar realizar algo, que geralmente pode acarretar em algum problema.
	Utilizamos o Catch para capturar o erro e com isso oferecer ao usuário uma mensagem adequada sem que o sistema quebre.
	Para implementar a exceção, deve-se ver o erro que deu no console primeiro, e depois criar um try-catch de acordo com o que deu no console.
		Exemplo 1: Array fora do limite, tentando acessar o [6] se só tem até o [4]
			try { (Tentar: )
					System.out.println(numeros[6]); --> não pode.
				} catch (ArrayIndexOutOfBoundsException e){ --> Caso não consiga, ao invés de imprimir o erro, vai imprimir:
					System.out.println("Você está tentando acessar uma posição do array que não existe.");
				}
	Sintaxe:
		catch (NomeDaException e){
		catch (ArrayIndexOutOfBoundsException e){
	
	Exemplo 2: Divisão por 0. 
	Exemplo 3: Escrevendo uma String quando o scanner pede um número int.
		try{
        int num1 = sc.nextInt();
        int num2 = sc.nextInt();
        System.out.println("A divisão é: " + (num1/num2));
        
		}catch (ArithmeticException e){ 
            System.out.println("Não é possível dividir por zero.");

        }catch (InputMismatchException x){
            System.out.println("Número inválido, uma letra foi digitada.");
		}
		
	O bloco "try" deve envolver todas as operações que podem dar exceção, neste caso, o try está em cima para pegar a parte do Scanner e da divisão.
	A exception 2 pega nas linhas "int num = sc.nextInt()" e a exception 3 pega na linha do print que faz a divisão em "a divisão é: "
	Finally
		O finally sempre será executado, entrado no catch ou não.
	

	Também é possível capturar 2 exceções de tipos diferentes:
		try{
			int n1 = sc.nextInt();
			int n2 = sc.nextInt();
				System.out.println("O resultado da divisão é: " + divisao(n1,n2));
				// Ela não deixa executar sem o tratamento de exceção, pois há a possibilidade de haver alguma. Ex: Divisão por 0.
			}
			catch (ArithmeticException e){
				System.out.println("Não foi possível dividir os valores.");
			}
			catch (Exception e) { --> Se a exceção for do tipo Arithmetic, ele nem entra neste
				System.out.println("Não foi possível dividir.");
      
	
Tipos de Exception
	Existem dois grupos de exceções:
		Checked Exceptions
		Unchecked Exceptions
		
	Checked Exceptions:
		- Exception1 --> Classe pai, engloba todas as outras exceções.
		- IOException  --> Trata erros envolvendo Input/Output.
		- SQLException  --> Trata erros envolvendo bancos de dados/SQL.
		São menos perigosas.
		Fazem com que o programa não seja executado até que a exceção seja tratada.
		
	Unchecked Exceptions:
		- RuntimeException --> Trata erros envolvendo tempos de execução.
		- NullPointerException --> Não herda diretamente de Exception1, sendo filha de RuntimeException, ela trata erros de Runtime do tipo Nullpointer, ponteiros nulos.
		- ArrayIndexOutOfBoundsException --> Também herda de runtime, e trata erros envolvendo Arrays fora do limite. 
		São mais perigosas.
		Só acontecem durante a execução do programa, então geralmentenão dá pra saber onde ela pode ocorrer.
  
Throws 
	É possível criar uma função que pode lançar exceções:
			public static int divisao (int n1, int n2) throws Exception{  --> 	Função que lança uma exceção do tipo Exception
				return n1/n2;
				
		   Porém, quando chama, ela não permite executar caso a exceção não seja tratada.
		   Para isso:
		  
			try{
			int n1 = sc.nextInt();--> ativará caso digite uma letra
			int n2 = sc.nextInt();
				System.out.println("O resultado da divisão é: " + divisao(n1,n2)); --> ativará caso a divisão seja por 0.
				// Ela não deixa executar sem o tratamento de exceção, pois há a possibilidade de haver alguma. 
			}catch (Exception e) {
				System.out.println("Não foi possível dividir.");
			}